---
title: "Visitors Plots"
format: html
---

I want to have different tabs in my app. This tab is going to have visitors per park from 2000 - 2016, and I'm going to do a line graph 
```{r}
library("httr")
library("readxl")
GET("https://query.data.world/s/fr5k6pcrcweo7wr657vchbeq6f3cci?dws=00000", write_disk(tf <- tempfile(fileext = ".xlsx")))
df <- read_excel(tf)
df |> filter(YearRaw == "Total")
df2 <- df |> filter(YearRaw >= "2000")
just_np <- df |> filter(`Unit Type` == "National Park")


# lets make a line plot of all of them, need to exclude the total from YearRaw 
just_years <- df |> filter(YearRaw != "Total")

options(scipen = 999)
library(scales)
ggplot(data = just_years, aes(x = YearRaw, y = Visitors, group = `Unit Name`)) +
  geom_line() +
  scale_y_continuous(labels = scales::comma)

national_parks <- df2 |> filter(`Unit Type` == "National Park")
national_parks2 <- national_parks |> filter(YearRaw != "Total")
national_parks3 <- national_parks |> filter(YearRaw != "Total") |> filter(Visitors >= 1000000)

plot1 <- ggplot(data = national_parks2, aes(x = YearRaw, y = Visitors, group = `Unit Name`)) +
  geom_line(aes(colour = `Unit Name`)) +
  scale_color_viridis_d() +
  scale_y_continuous(labels = scales::comma)

# Too much keep just true national parks 

library(plotly)
ggplotly(plot1)

plot2 <- ggplot(data = national_parks3, aes(x = YearRaw, y = Visitors, group = `Unit Name`)) +
  geom_line(aes(colour = `Unit Name`)) +
  scale_color_viridis_d() +
  scale_y_continuous(labels = scales::comma) +
  labs(title = "Visitors in National Parks from 2000 to 2016", subtitle = "Minimum visitors is set at 1,000,000") +
  theme_minimal()

# How do i dodge or stagger x labels so you can see them all??

ggplotly(plot2)

## I want to have a plot for every unit type 

```

```{r}
      ggplot(data = just_np, aes(x = YearRaw, y = Visitors, group = `Unit Name`)) +
        geom_line(aes(color = `Unit Name`), show.legend = FALSE) +
        scale_color_viridis_d() +
        scale_y_continuous(labels = scales::comma) +
        labs(title = "Visitors in National Parks from 2000 to 2016", subtitle = "Minimum visitors is set at 1,000,000") +
        theme_minimal()

                                         
```

# drop down to pick one or more parks 
Have th elist of parks that drop down reflect the input of years and min visitors 

Set years from 1995 to 2015 and get rid of min visitors 
```{r}
library("httr")
library("readxl")
library(scales)
options(scipen = 999)
library(dplyr)
library(plotly)
library(tidyverse)


GET("https://query.data.world/s/fr5k6pcrcweo7wr657vchbeq6f3cci?dws=00000", write_disk(tf <- tempfile(fileext = ".xlsx")))
df <- read_excel(tf)
df <- df |> 
  rename(Year = YearRaw) |>
  rename(Type = `Unit Type`) |> 
  rename(Name = `Unit Name`)

np_visitors <- df |> 
  filter(Type == "National Park") |>
  filter(Year != "Total") |>
  filter(Year >= 1995 & Year <= 2016)

      visitors_plot <- ggplot(data = np_visitors, aes(x = Year, y = Visitors, group = Name,
                                                      label = Name,
                                                      label2 = Year,
                                                      label3 = Visitors)) +
        geom_line(aes(color = Name), show.legend = FALSE) +
        scale_color_viridis_d() +
        scale_y_continuous(labels = scales::comma) +
        labs(title = "Visitors in National Parks from 1995 to 2016") +
        theme_minimal() +
        theme(legend.position = "none")
      
      ggplotly(visitors_plot, tooltip = c("label", "label2", "label3"))
      
  
    


```

Plot for looking at one park more indepth
```{r}
one_park <- np_visitors |>
  filter(Name == "Acadia National Park")

op_plot <- ggplot(data = one_park, aes(x = Year, y = Visitors)) +
  geom_col(colour = 'darkolivegreen', fill = 'darkolivegreen3',
           position = "dodge") 


ggplotly(op_plot)


```

