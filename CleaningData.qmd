---
title: "CleaningData"
format: html
---

# All data for map
```{r}
library(sf)
library(here)
library(tidyverse)
library(leaflet)
library(rvest)
library(stringr)
library(fuzzyjoin)
library(htmltools)
library(glue)

# Data for all parks 
# https://public-nps.opendata.arcgis.com/datasets/nps::nps-boundary-4/explore?location=37.015375%2C-81.906543%2C6.00
nps <- sf::read_sf("NPS_Land/nps_boundary.shp") |>
  sf::st_transform('+proj=longlat +datum=WGS84')

# Data for just National Parks 
url <- "https://en.wikipedia.org/wiki/List_of_national_parks_of_the_United_States"
h <- read_html(url)
tab <- h |> html_nodes("table")
wiki_np_data <- tab[[1]] |> html_table()
wiki_np_clean <- wiki_np_data |> mutate(wiki_name = str_replace_all(Name, "[^[:alnum:]]", " ")) |>
  relocate(wiki_name)

# Cleaning data for all parks to simplify names
nps_clean <- nps |> mutate(nps_name = str_remove_all(UNIT_NAME, " National") |>
                 str_remove_all(" Historical Site") |> 
                 str_remove_all( " Historical Park") |>
                 str_remove_all( " Historical Trail") |>
                 str_remove_all( " Park")) |>
  relocate(nps_name)

# Joining both data sets to be able to differentiate between National Parks and other areas on the map 
joined2 <- nps_clean |>
  stringdist_inner_join(wiki_np_clean, by = c("nps_name" = "wiki_name"), max_dist = 4) |>
  relocate(wiki_name, nps_name)
#remove rows 4,5,9,11,12,33, 44, 63,69,70 due to duplication or wrong classification 
joined2 <- joined2[-c(4,5,9,11,12,33,44,63,69,70), ]


joined_clean <- joined2 |> 
  rename(Established = `Date established as park[12]`, 
         Area = `Area (2023)[8]`, 
         Visitors_2022 = `Recreation visitors (2022)[11]`) |>
  mutate(popup = paste(
  "Name: ", UNIT_NAME,
  "Date of Establishment: ", Established,
  "Visitors in 2022: ", Visitors_2022,
  "Description of Park: ", Description)) |>
  arrange(nps_name)

label_text <- glue(
  "<b> Name: </b> {joined_clean$UNIT_NAME}<br/>",
  "<b> Established: </b> {joined_clean$Established}<br/>",
  "<b> Visitors in 2022: </b> {joined_clean$Visitors_2022}<br/>",
  "<b> Description: </b> {joined_clean$Description}<br/>") |>
  lapply(htmltools::HTML)

save(joined_clean,
        file = "joined_map_data.Rds")
```

# Data tables
```{r}
library(DT)
library(lubridate)

nps_display <- nps |> select(UNIT_NAME, UNIT_TYPE, STATE, METADATA )
datatable(nps_display)
joined_display <- joined_clean |> select(PARKNAME, STATE, Established, Area, Visitors_2022, Description)
joined_display <- joined_display |> rename(Name = PARKNAME, State = STATE, "Visitors in 2022" = Visitors_2022)
  

# to make this work for finding oldest/newest park I think it needs to be just the year it was established or turn data type into a year 


gsub("\\[.*?\\]", "", joined_display$Established)
joined_display <- joined_display |> 
  mutate(Date = gsub("\\[.*?\\]", "", joined_display$Established)) |> 
  mutate(Established_D = mdy(Date)) |> 
  select(Name, State, Established_D, Area, `Visitors in 2022`, Description) |> 
  rename(Established = Established_D)

datatable(joined_display) 

# get rid of geometry st_drop_geomtry. . 

nps_display |> st_drop_geometry()

nps_display |> filter(UNIT_TYPE %in% c("National Historical Park", "National Historic Site")) 
```

